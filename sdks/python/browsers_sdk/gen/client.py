# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .raw_client import AsyncRawMorphLabsApi, RawMorphLabsApi
from .types.recording_list import RecordingList
from .types.session import Session
from .types.session_list import SessionList

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MorphLabsApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from morph_labs import MorphLabsApi

    client = MorphLabsApi(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawMorphLabsApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawMorphLabsApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMorphLabsApi
        """
        return self._raw_client

    def list_sessions(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionList:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionList
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.list_sessions()
        """
        _response = self._raw_client.list_sessions(request_options=request_options)
        return _response.data

    def create_session(
        self,
        *,
        name: typing.Optional[str] = None,
        viewport_width: typing.Optional[int] = None,
        viewport_height: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Create a new browser session.

        If resource limits are reached, return an existing session for the user
        instead of failing with 500.

        Parameters
        ----------
        name : typing.Optional[str]

        viewport_width : typing.Optional[int]

        viewport_height : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_session()
        """
        _response = self._raw_client.create_session(
            name=name, viewport_width=viewport_width, viewport_height=viewport_height, request_options=request_options
        )
        return _response.data

    def get_session_connect_url(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_session_connect_url(
            id="id",
        )
        """
        _response = self._raw_client.get_session_connect_url(id, request_options=request_options)
        return _response.data

    def get_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_session(
            id="id",
        )
        """
        _response = self._raw_client.get_session(id, request_options=request_options)
        return _response.data

    def stop_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.stop_session(
            id="id",
        )
        """
        _response = self._raw_client.stop_session(id, request_options=request_options)
        return _response.data

    def get_session_by_name(self, name: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_session_by_name(
            name="name",
        )
        """
        _response = self._raw_client.get_session_by_name(name, request_options=request_options)
        return _response.data

    def pause_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Pause a running browser session (VM pause).

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.pause_session(
            id="id",
        )
        """
        _response = self._raw_client.pause_session(id, request_options=request_options)
        return _response.data

    def resume_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Resume a previously paused browser session.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.resume_session(
            id="id",
        )
        """
        _response = self._raw_client.resume_session(id, request_options=request_options)
        return _response.data

    def branch_session(
        self, id: str, *, replicas: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionList:
        """
        Branch an existing session into N replicas.

        Each branched session receives a new `browsers:id` while inheriting the
        parent's recording state via a shared `browsers:recording_id`.

        Parameters
        ----------
        id : str

        replicas : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionList
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.branch_session(
            id="id",
        )
        """
        _response = self._raw_client.branch_session(id, replicas=replicas, request_options=request_options)
        return _response.data

    def update_session_metadata(
        self,
        id: str,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Update per-session metadata stored on the instance.
        - `metadata` is stored serialized under `browsers:meta` (JSON string).

        Parameters
        ----------
        id : str

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.update_session_metadata(
            id="id",
        )
        """
        _response = self._raw_client.update_session_metadata(id, metadata=metadata, request_options=request_options)
        return _response.data

    def share_session(
        self,
        id: str,
        *,
        ttl_seconds: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        ttl_seconds : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.share_session(
            id="id",
        )
        """
        _response = self._raw_client.share_session(id, ttl_seconds=ttl_seconds, request_options=request_options)
        return _response.data

    def list_recordings(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> RecordingList:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RecordingList
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.list_recordings(
            id="id",
        )
        """
        _response = self._raw_client.list_recordings(id, request_options=request_options)
        return _response.data

    def start_recording(
        self,
        id: str,
        *,
        recording_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        recording_id : typing.Optional[str]

        name : typing.Optional[str]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.start_recording(
            id="id",
        )
        """
        _response = self._raw_client.start_recording(
            id, recording_id=recording_id, name=name, description=description, request_options=request_options
        )
        return _response.data

    def stop_recording(
        self, id: str, rid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        rid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.stop_recording(
            id="id",
            rid="rid",
        )
        """
        _response = self._raw_client.stop_recording(id, rid, request_options=request_options)
        return _response.data

    def get_recording_events_raw(
        self, id: str, rid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        rid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from morph_labs import MorphLabsApi

        client = MorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_recording_events_raw(
            id="id",
            rid="rid",
        )
        """
        _response = self._raw_client.get_recording_events_raw(id, rid, request_options=request_options)
        return _response.data


class AsyncMorphLabsApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from morph_labs import AsyncMorphLabsApi

    client = AsyncMorphLabsApi(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawMorphLabsApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMorphLabsApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMorphLabsApi
        """
        return self._raw_client

    async def list_sessions(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionList:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionList
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.list_sessions()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_sessions(request_options=request_options)
        return _response.data

    async def create_session(
        self,
        *,
        name: typing.Optional[str] = None,
        viewport_width: typing.Optional[int] = None,
        viewport_height: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Create a new browser session.

        If resource limits are reached, return an existing session for the user
        instead of failing with 500.

        Parameters
        ----------
        name : typing.Optional[str]

        viewport_width : typing.Optional[int]

        viewport_height : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_session()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_session(
            name=name, viewport_width=viewport_width, viewport_height=viewport_height, request_options=request_options
        )
        return _response.data

    async def get_session_connect_url(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_session_connect_url(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_session_connect_url(id, request_options=request_options)
        return _response.data

    async def get_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_session(id, request_options=request_options)
        return _response.data

    async def stop_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.stop_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.stop_session(id, request_options=request_options)
        return _response.data

    async def get_session_by_name(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Session:
        """
        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_session_by_name(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_session_by_name(name, request_options=request_options)
        return _response.data

    async def pause_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Pause a running browser session (VM pause).

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.pause_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.pause_session(id, request_options=request_options)
        return _response.data

    async def resume_session(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Session:
        """
        Resume a previously paused browser session.

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.resume_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.resume_session(id, request_options=request_options)
        return _response.data

    async def branch_session(
        self, id: str, *, replicas: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionList:
        """
        Branch an existing session into N replicas.

        Each branched session receives a new `browsers:id` while inheriting the
        parent's recording state via a shared `browsers:recording_id`.

        Parameters
        ----------
        id : str

        replicas : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionList
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.branch_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.branch_session(id, replicas=replicas, request_options=request_options)
        return _response.data

    async def update_session_metadata(
        self,
        id: str,
        *,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Session:
        """
        Update per-session metadata stored on the instance.
        - `metadata` is stored serialized under `browsers:meta` (JSON string).

        Parameters
        ----------
        id : str

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Session
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.update_session_metadata(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_session_metadata(
            id, metadata=metadata, request_options=request_options
        )
        return _response.data

    async def share_session(
        self,
        id: str,
        *,
        ttl_seconds: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        ttl_seconds : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.share_session(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.share_session(id, ttl_seconds=ttl_seconds, request_options=request_options)
        return _response.data

    async def list_recordings(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RecordingList:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RecordingList
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.list_recordings(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_recordings(id, request_options=request_options)
        return _response.data

    async def start_recording(
        self,
        id: str,
        *,
        recording_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        recording_id : typing.Optional[str]

        name : typing.Optional[str]

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.start_recording(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.start_recording(
            id, recording_id=recording_id, name=name, description=description, request_options=request_options
        )
        return _response.data

    async def stop_recording(
        self, id: str, rid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        rid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.stop_recording(
                id="id",
                rid="rid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.stop_recording(id, rid, request_options=request_options)
        return _response.data

    async def get_recording_events_raw(
        self, id: str, rid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        rid : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from morph_labs import AsyncMorphLabsApi

        client = AsyncMorphLabsApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.get_recording_events_raw(
                id="id",
                rid="rid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_recording_events_raw(id, rid, request_options=request_options)
        return _response.data
